@using BlazorLife.Models

<div class="cell-grid">
    <table class="grid-table">

        @for (int y = 0; y < lastY; y++)
        {
            <tr>
                @for (int x = 0; x < lastX; x++)
                {
                    <td class="cell @(grid.CellAt(x, y).IsAlive ? "alive" : "dead")">
                        .
                    </td>
                }
            </tr>

        }
    </table>
</div>

@code {
    [Parameter]
    public IGrid grid { get; set; }
    [Parameter]
    public IGridRule gridRule { get; set; }
    [Parameter]
    public IGridRunner gridRunner { get; set; }
    [Parameter]
    public uint lastX { get; set; }
    [Parameter]
    public uint lastY { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var rand = new Random(DateTime.Now.Second);
        grid = new Grid("Main");

        for (int y = 0; y < 100; y++)
        {
            for (var x = 0; x < 100; x++)
            {
                var cell = grid.CellAt(x, y);
                if (rand.Next(0, 2) == 1) { cell.Live(); } else { cell.Die(); }
                if (cell.Coordinate.X > lastX) { lastX = (uint)cell.Coordinate.X; }
                if (cell.Coordinate.Y > lastY) { lastY = (uint)cell.Coordinate.Y; }
            }
        }

        /*grid.CellAt(1, 3).Live();
        grid.CellAt(2, 1).Live();
        grid.CellAt(2, 3).Live();
        grid.CellAt(3, 2).Live();
        grid.CellAt(3, 3).Live();
        lastX = 100;
        lastY = 100;*/

        gridRule = new GridRule();
        gridRunner = new GridRunner(grid, gridRule);
    }

}
