@using BlazorLife.Models
@rendermode InteractiveServer

<div class="controls">
    <button @onclick="Step">
        Step
    </button>
</div>

<CellGrid grid="@grid" gridRule="@gridRule" gridRunner="@gridRunner" lastX="@lastX" lastY="@lastY">
</CellGrid>

@code {
    private IGrid grid;
    private IGridRule gridRule;
    private IGridRunner gridRunner;
    private uint lastX = 0;
    private uint lastY = 0;

    protected override async Task OnInitializedAsync()
    {
        var rand = new Random(DateTime.Now.Second);
        grid = new Grid("Main");

        for (int y = 0; y < 100; y++)
        {
            for (var x = 0; x < 100; x++)
            {
                var cell = grid.CellAt(x, y);
                if (cell == null) continue;
                if (rand.Next(0, 2) == 1) { cell.Live(); } else { cell.Die(); }
                if (cell.Coordinate.X > lastX) { lastX = (uint)cell.Coordinate.X; }
                if (cell.Coordinate.Y > lastY) { lastY = (uint)cell.Coordinate.Y; }
            }
        }

        /*grid.CellAt(1, 3).Live();
        grid.CellAt(2, 1).Live();
        grid.CellAt(2, 3).Live();
        grid.CellAt(3, 2).Live();
        grid.CellAt(3, 3).Live();
        lastX = 100;
        lastY = 100;*/

        gridRule = new GridRule();
        gridRunner = new GridRunner(grid, gridRule);
    }

    private void Step()
    {
        gridRunner.Step();
        StateHasChanged();
    }
}
